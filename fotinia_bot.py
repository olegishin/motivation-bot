import os
import json
import random
import logging
import asyncio
import tempfile
import shutil
import re
from pathlib import Path
from datetime import datetime, timedelta, time
from zoneinfo import ZoneInfo

# ---------------- –ó–∞–≥—Ä—É–∑–∫–∞ .env ----------------
from dotenv import load_dotenv
load_dotenv("token_id.env")  # <- –∑–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ—à—å —Å–≤–æ–π —Ñ–∞–π–ª .env

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.error import Forbidden, BadRequest, RetryAfter
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ---------------- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ----------------
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –Ω–µ—Ç

USERS_FILE = DATA_DIR / "users.json"
GOALS_FILE = DATA_DIR / "fotinia_goals.json"
MORNING_FILE = DATA_DIR / "fotinia_morning_phrases.json"
EVENING_FILE = DATA_DIR / "fotinia_evening_phrases.json"
DAY_FILE = DATA_DIR / "fotinia_day_phrases.json"
PHRASES_FILE = DATA_DIR / "fotinia_phrases.json"
CHALLENGES_FILE = DATA_DIR / "challenges.json"
RULES_FILE = DATA_DIR / "universe_laws.json"

# ---------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------------
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å python-dotenv –∏ .env —Ñ–∞–π–ª
# from dotenv import load_dotenv
# load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", 0))

if not BOT_TOKEN or not OWNER_CHAT_ID:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
BTN_MOTIVATE = "üí™ –ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è"
BTN_RANDOM_GOAL = "üéØ –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å"
BTN_CHALLENGE = "‚öîÔ∏è –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è"
BTN_RULES = "üìú –ü—Ä–∞–≤–∏–ª–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"

BTN_SHOW_USERS = "üìÇ –°–º–æ—Ç—Ä–µ—Ç—å users.json"
BTN_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

MAIN_KEYBOARD = [
    [BTN_MOTIVATE, BTN_RANDOM_GOAL],
    [BTN_CHALLENGE, BTN_RULES]
]

ADMIN_BUTTONS = [
    [BTN_SHOW_USERS, BTN_STATS]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
OWNER_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD + ADMIN_BUTTONS, resize_keyboard=True)

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def load_json(filepath: Path) -> list | dict:
    if not filepath.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return [] if 'phrases' in str(filepath) or 'goals' in str(filepath) or 'challenges' in str(filepath) or 'laws' in str(filepath) else {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {filepath}: {e}")
        return [] if 'phrases' in str(filepath) or 'goals' in str(filepath) or 'challenges' in str(filepath) or 'laws' in str(filepath) else {}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filepath}: {e}")
        return [] if 'phrases' in str(filepath) or 'goals' in str(filepath) or 'challenges' in str(filepath) or 'laws' in str(filepath) else {}

def load_users() -> dict:
    return load_json(USERS_FILE) or {}

def save_users(users_data: dict) -> None:
    try:
        with tempfile.NamedTemporaryFile("w", delete=False, encoding="utf-8", dir=DATA_DIR) as tmp:
            json.dump(users_data, tmp, ensure_ascii=False, indent=2)
            tmp_path = tmp.name
        shutil.move(tmp_path, USERS_FILE)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {USERS_FILE}: {e}")

def get_user_timezone(users_data: dict, chat_id: int) -> ZoneInfo:
    tz_name = users_data.get(str(chat_id), {}).get("timezone", "Europe/Kyiv")
    try:
        return ZoneInfo(tz_name)
    except Exception:
        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∑–æ–Ω–∞ '{tz_name}' –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Kyiv")
        return ZoneInfo("Europe/Kyiv")

def get_user_name(users_data: dict, chat_id: int, default="–¥—Ä—É–≥") -> str:
    return users_data.get(str(chat_id), {}).get("name", default)

def is_demo_expired(users_data: dict, chat_id: int) -> bool:
    user = users_data.get(str(chat_id))
    if not user:
        return True
    demo_exp = user.get("demo_expiration")
    if demo_exp is None:
        return False
    try:
        expiration = datetime.fromisoformat(demo_exp)
        user_tz = get_user_timezone(users_data, chat_id)
        return datetime.now(user_tz) > expiration
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ demo_expiration –¥–ª—è {chat_id}: {e}")
        return True

def is_grace_period_expired(users_data: dict, chat_id: int) -> bool:
    user = users_data.get(str(chat_id))
    if not user or "grace_period_end" not in user:
        return False
    try:
        grace_end = datetime.fromisoformat(user["grace_period_end"])
        user_tz = get_user_timezone(users_data, chat_id)
        return datetime.now(user_tz) > grace_end
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ grace_period_end –¥–ª—è {chat_id}: {e}")
        return True

# ---------------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ----------------
async def safe_send(app, chat_id: int, text: str, **kwargs) -> bool:
    try:
        await app.bot.send_message(int(chat_id), text, **kwargs)
        return True
    except Forbidden:
        logger.warning(f"‚õî –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
        users_data = app.bot_data.get("users", {})
        if str(chat_id) in users_data:
            users_data[str(chat_id)]["active"] = False
            save_users(users_data)
        return False
    except BadRequest as e:
        msg = str(e).lower()
        if "chat not found" in msg or "user not found" in msg:
            logger.warning(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è BadRequest –¥–ª—è {chat_id}: {e}")
        return False
    except RetryAfter as e:
        delay = e.retry_after
        logger.warning(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram, –∂–¥—ë–º {delay} —Å–µ–∫...")
        await asyncio.sleep(delay)
        return await safe_send(app, chat_id, text, **kwargs) # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")
        return False

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------
async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_int = update.effective_chat.id
    chat_id_str = str(chat_id_int)
    name = update.effective_user.first_name or "–¥—Ä—É–≥"

    users_data = context.bot_data.get("users", {})
    user_record = users_data.get(chat_id_str)

    is_admin = (chat_id_int == OWNER_CHAT_ID) or (user_record and user_record.get("is_admin", False))

    is_new_user = not user_record
    if is_new_user:
        tz = ZoneInfo("Europe/Kyiv")
        expiration = (datetime.now(tz) + timedelta(days=3)).isoformat() if chat_id_int != OWNER_CHAT_ID else None
        users_data[chat_id_str] = {
            "name": name,
            "timezone": str(tz),
            "demo_expiration": expiration,
            "active": True,
            "is_admin": is_admin
        }
        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({chat_id_int})")
    else:
        users_data[chat_id_str]["active"] = True
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({chat_id_int}) –≤–µ—Ä–Ω—É–ª—Å—è")

    if chat_id_int != OWNER_CHAT_ID:
        if is_demo_expired(users_data, chat_id_int):
            if not user_record or not user_record.get("grace_period_end") or is_grace_period_expired(users_data, chat_id_int):
                users_data[chat_id_str]["active"] = False
                users_data[chat_id_str]["grace_period_end"] = (datetime.now(get_user_timezone(users_data, chat_id_int)) + timedelta(days=4)).isoformat()
                save_users(users_data)
                context.bot_data["users"] = users_data
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞, —Ö–æ—á—É!", callback_data="extend_demo")]])
                await update.message.reply_text("‚ùå –î–µ–º–æ-–ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É?", reply_markup=keyboard)
                return

    save_users(users_data)
    context.bot_data["users"] = users_data

    if is_new_user and chat_id_int != OWNER_CHAT_ID:
        await safe_send(context.application, OWNER_CHAT_ID, f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {chat_id_int})")

    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    
    # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç—ã
    demo_exp = users_data[chat_id_str].get("demo_expiration")
    expiration_date = datetime.fromisoformat(demo_exp).strftime("%d.%m.%Y %H:%M") if demo_exp else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –§–æ—Ç–∏–Ω–∏—è, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n"
        f"–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expiration_date}.\n\n"
        "–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ç—Ä–æ–º, –¥–Ω—ë–º –∏ –≤–µ—á–µ—Ä–æ–º.\n"
        "–ê —ç—Ç–æ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç —Ö–æ—Ä–æ—à–æ)
async def handle_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–æ!")

async def handle_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    phrases = load_json(PHRASES_FILE)
    if not phrases:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–π –ø—É—Å—Ç.")
        return

    user_name = update.effective_user.first_name
    phrase = random.choice(phrases).format(name=user_name)
    await update.message.reply_text(f"üí¨ {phrase}", parse_mode="HTML")


async def handle_random_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    goals = load_json(GOALS_FILE)
    if not goals:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    user_name = update.effective_user.first_name
    goal = random.choice(goals).format(name=user_name)
    await update.message.reply_text(f"üéØ <b>{goal}</b>", parse_mode="HTML")


# ---------------- –•—ç–Ω–¥–ª–µ—Ä –ß–µ–ª–ª–µ–Ω–¥–∂–∞ ----------------
async def handle_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    challenges = load_json(CHALLENGES_FILE)
    if not challenges:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—É—Å—Ç.")
        return

    user_name = update.effective_user.first_name
    challenge = random.choice(challenges).format(name=user_name)

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_challenge:{challenge}"),
            InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π", callback_data="new_challenge")
        ]
    ])

    await update.message.reply_text(
        f"üî• <b>{challenge}</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ ----------------
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–µ–º–æ
    if query.data == "extend_demo":
        await query.edit_message_text(
            "üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ø–æ–∫–∞ —á—Ç–æ)."
        )
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
    if query.data.startswith("accept_challenge:"):
        challenge_text = query.data.split(":", 1)[1]
        await query.edit_message_text(
            f"üí™ –¢—ã –ø—Ä–∏–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂:\n\nüî• <b>{challenge_text}</b>",
            parse_mode="HTML"
        )

    # –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
    elif query.data == "new_challenge":
        challenges = load_json(CHALLENGES_FILE)
        if not challenges:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—É—Å—Ç.")
            return

        user_name = query.from_user.first_name
        new_challenge = random.choice(challenges).format(name=user_name)
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_challenge:{new_challenge}"),
                InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π", callback_data="new_challenge")
            ]
        ])
        await query.edit_message_text(
            f"üî• <b>{new_challenge}</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )


async def handle_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return

    rules = load_json(RULES_FILE)
    if not rules:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç.")
        return

    user_name = update.effective_user.first_name
    rule = random.choice(rules).format(name=user_name)
    await update.message.reply_text(f"üìú <b>{rule}</b>", parse_mode="HTML")


async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")


async def show_users_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_CHAT_ID: return
    try:
        if not USERS_FILE.exists():
            await update.message.reply_text("–§–∞–π–ª users.json –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            return
        await update.message.reply_document(document=open(USERS_FILE, "rb"))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_CHAT_ID: return
    users = load_users()
    total = len(users)
    active = sum(1 for u in users.values() if u.get("active"))
    await update.message.reply_text(f"üë• –í—Å–µ–≥–æ: {total}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total - active}")

# ... (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)

# ---------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------
async def send_scheduled_message(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    filename = job.data["filename"]
    log_message = job.data["log_message"]

    users_data = context.bot_data.get("users", {})
    user_info = users_data.get(str(chat_id), {})

    if not user_info.get("active") or is_demo_expired(users_data, chat_id) or is_grace_period_expired(users_data, chat_id):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ '{log_message}' –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        return

    phrases = load_json(BASE_DIR / filename)
    if not phrases:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –ø—É—Å—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {chat_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    name = user_info.get("name", "–¥—Ä—É–≥")
    phrase = random.choice(phrases).format(name=name)

    if await safe_send(context.application, chat_id, phrase):
        logger.info(f"‚úÖ {log_message} –¥–ª—è {chat_id}")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {log_message} –¥–ª—è {chat_id}")

async def check_demo_reminders(context: ContextTypes.DEFAULT_TYPE):
    users_data = context.bot_data.get("users", {})
    utc_now = datetime.now(ZoneInfo("UTC"))
    for chat_id_str, user in users_data.items():
        if user.get("demo_expiration"):
            try:
                chat_id = int(chat_id_str)
                demo_end = datetime.fromisoformat(user["demo_expiration"])
                time_left = demo_end - utc_now
                if timedelta(days=0) < time_left <= timedelta(days=1):
                    await safe_send(context.application, chat_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            except (ValueError, TypeError):
                continue


# ---------------- Main / –∑–∞–ø—É—Å–∫ ----------------
from pathlib import Path
from datetime import time
from zoneinfo import ZoneInfo

BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"

async def post_init(app: Application):
    logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è post_init...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users()
    app.bot_data["users"] = users_data
    logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
    for job in app.job_queue.jobs():
        job.schedule_removal()
    logger.info("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—â–µ–Ω—ã.")

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫
    schedules = [
        {"hour": 8, "minute": 0, "filename": "fotinia_morning_phrases.json", "log": "üåÖ –£—Ç—Ä–æ"},
        {"hour": 12, "minute": 0, "filename": "fotinia_phrases.json", "log": "üé≤ –°–ª—É—á–∞–π–Ω–∞—è"},
        {"hour": 15, "minute": 0, "filename": "fotinia_day_phrases.json", "log": "‚òÄÔ∏è –î–µ–Ω—å"},
        {"hour": 18, "minute": 0, "filename": "fotinia_evening_phrases.json", "log": "üåô –í–µ—á–µ—Ä"},
    ]

    total_jobs = 0
    for chat_id_str, user in users_data.items():
        try:
            tz = ZoneInfo(user.get("timezone", "Europe/Kyiv"))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id_str}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Europe/Kyiv")
            tz = ZoneInfo("Europe/Kyiv")

        for job_info in schedules:
            json_path = DATA_DIR / job_info["filename"]
            if not json_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                continue

            try:
                app.job_queue.run_daily(
                    send_scheduled_message,
                    time=time(hour=job_info["hour"], minute=job_info["minute"], tzinfo=tz),
                    chat_id=int(chat_id_str),
                    data={"filename": str(json_path), "log_message": job_info["log"]},
                    name=f"{job_info['log']}_{chat_id_str}"
                )
                total_jobs += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ job –¥–ª—è {chat_id_str}: {e}")

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        app.job_queue.run_daily(
            check_demo_reminders,
            time=time(hour=10, minute=0, tzinfo=ZoneInfo("UTC"))
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å job check_demo_reminders: {e}")

    logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_jobs} —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ 1 –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    try:
        await app.bot.send_message(chat_id=OWNER_CHAT_ID, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")


#-------------------–ó–∞–ø—É—Å–∫------------------------
def register_handlers(app):
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(CommandHandler("pay", handle_pay))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_MOTIVATE)}$"), handle_motivation))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_RANDOM_GOAL)}$"), handle_random_goal))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_CHALLENGE)}$"), handle_challenge))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_RULES)}$"), handle_rules))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_SHOW_USERS)}$"), show_users_file))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_STATS)}$"), user_stats))

    # –ö–æ–ª–±—ç–∫–∏ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_text))


def run_polling():
    logger.warning("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–æ)")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    register_handlers(app)
    app.run_polling(allowed_updates=Update.ALL_TYPES)


async def run_webhook():
    logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook (Fly.io)")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    register_handlers(app)

    APP_NAME = os.getenv("FLY_APP_NAME")
    PORT = int(os.getenv("PORT", 8443))
    webhook_url = f"https://{APP_NAME}.fly.dev/{BOT_TOKEN}"

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=webhook_url,
        allowed_updates=Update.ALL_TYPES
    )

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
if __name__ == "__main__":
    if os.getenv("FLY_APP_NAME"):
        asyncio.run(run_webhook())
    else:
        run_polling()
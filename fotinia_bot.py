import os
import json
import random
import logging
import asyncio
import tempfile
import shutil
import re
import hashlib
from pathlib import Path
from datetime import datetime, timedelta, time
import pytz
from collections import defaultdict
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from dotenv import load_dotenv
from contextlib import asynccontextmanager

# –ò–º–ø–æ—Ä—Ç—ã Telegram –∏ FastAPI
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import Forbidden, BadRequest, RetryAfter
from fastapi import FastAPI, Request
import uvicorn

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

# –ë–ª–æ–∫: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–ª–æ–∫: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
load_dotenv("token_id.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
SPECIAL_USER_ID = 290711961

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except (TypeError, ValueError):
    raise ValueError("‚ùå ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# –ë–ª–æ–∫: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = Path(__file__).parent
DATA_DIR = Path("/data")  # –î–ª—è Fly, –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å S:\fotinia_bot\data
DATA_DIR.mkdir(exist_ok=True)
logger.info(f"üìÅ DATA_DIR: {DATA_DIR.resolve()}")

USERS_FILE = DATA_DIR / "users.json"
CHALLENGES_FILE = DATA_DIR / "challenges.json"  # –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è
RULES_FILE = DATA_DIR / "universe_laws.json"   # –ü—Ä–∞–≤–∏–ª–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
MOTIVATIONS_FILE = DATA_DIR / "fotinia_motivations.json"  # –ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è
RITM_FILE = DATA_DIR / "fotinia_ritm.json"     # –†–∏—Ç–º –¥–Ω—è
MORNING_FILE = DATA_DIR / "fotinia_morning_phrases.json"  # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ 8:00
GOALS_FILE = DATA_DIR / "fotinia_goals.json"   # –°–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 12:00
DAY_FILE = DATA_DIR / "fotinia_day_phrases.json"  # –î–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ 15:00
EVENING_FILE = DATA_DIR / "fotinia_evening_phrases.json"  # –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ 18:00

# –ë–ª–æ–∫: –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
BTN_MOTIVATE = "üí™ –ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è"
BTN_RHYTHM = "üéµ –†–∏—Ç–º –¥–Ω—è"
BTN_CHALLENGE = "‚öîÔ∏è –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è"
BTN_RULES = "üìú –ü—Ä–∞–≤–∏–ª–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"
BTN_SHOW_USERS = "üìÇ –°–º–æ—Ç—Ä–µ—Ç—å users.json"
BTN_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
BTN_EXTEND_DEMO = "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–º–æ"

MAIN_KEYBOARD = [[BTN_MOTIVATE, BTN_RHYTHM], [BTN_CHALLENGE, BTN_RULES]]
EXPIRED_DEMO_KEYBOARD = [[BTN_EXTEND_DEMO]]
ADMIN_BUTTONS = [[BTN_SHOW_USERS, BTN_STATS]]
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
EXPIRED_DEMO_MARKUP = ReplyKeyboardMarkup(EXPIRED_DEMO_KEYBOARD, resize_keyboard=True)
OWNER_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD + ADMIN_BUTTONS, resize_keyboard=True)

# –ë–ª–æ–∫: –£—Ç–∏–ª–∏—Ç—ã
def load_json(filepath: Path) -> List | Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not filepath.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return [] if any(key in str(filepath) for key in ["challenges", "universe_laws", "fotinia_motivations", "fotinia_ritm", "fotinia_morning_phrases", "fotinia_goals", "fotinia_day_phrases", "fotinia_evening_phrases"]) else {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {filepath}: {len(data) if isinstance(data, list) else 'dict'} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        return data
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {filepath}: {e}")
        return [] if any(key in str(filepath) for key in ["challenges", "universe_laws", "fotinia_motivations", "fotinia_ritm", "fotinia_morning_phrases", "fotinia_goals", "fotinia_day_phrases", "fotinia_evening_phrases"]) else {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filepath}: {e}")
        return [] if any(key in str(filepath) for key in ["challenges", "universe_laws", "fotinia_motivations", "fotinia_ritm", "fotinia_morning_phrases", "fotinia_goals", "fotinia_day_phrases", "fotinia_evening_phrases"]) else {}

def load_users() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    return load_json(USERS_FILE) or {}

def save_users(users_data: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    try:
        with tempfile.NamedTemporaryFile("w", delete=False, encoding="utf-8", dir=DATA_DIR) as tmp:
            json.dump(users_data, tmp, ensure_ascii=False, indent=2)
            tmp_path = tmp.name
        shutil.move(tmp_path, USERS_FILE)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {USERS_FILE}: {e}")

def get_user_timezone(users_data: Dict, chat_id: int) -> pytz.BaseTzInfo:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∑–µ—Ä–≤–æ–º –Ω–∞ Europe/Kiev."""
    tz_name = users_data.get(str(chat_id), {}).get("timezone", "Europe/Kiev")
    try:
        return pytz.timezone(tz_name)
    except Exception:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ '{tz_name}' –¥–ª—è {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Kiev")
        return pytz.timezone("Europe/Kiev")

def get_user_name(users_data: Dict, chat_id: int, default="–¥—Ä—É–≥") -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
    return users_data.get(str(chat_id), {}).get("name", default)

def is_demo_expired(users_data: Dict, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥–∞."""
    if chat_id == SPECIAL_USER_ID:
        return False
    user = users_data.get(str(chat_id))
    if not user:
        return True
    demo_exp = user.get("demo_expiration")
    if demo_exp is None:
        return False
    try:
        expiration = datetime.fromisoformat(demo_exp).replace(tzinfo=pytz.UTC)
        return datetime.now(pytz.UTC) > expiration
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ demo_expiration –¥–ª—è {chat_id}: {e}")
        return True

def is_grace_period_expired(users_data: Dict, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –º–∏–ª–æ—Å—Ç–∏."""
    if chat_id == SPECIAL_USER_ID:
        return False
    user = users_data.get(str(chat_id))
    if not user or "grace_period_end" not in user:
        return False
    try:
        grace_end = datetime.fromisoformat(user["grace_period_end"]).replace(tzinfo=pytz.UTC)
        return datetime.now(pytz.UTC) > grace_end
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ grace_period_end –¥–ª—è {chat_id}: {e}")
        return True

def safe_format(text: str, **kwargs) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
    def default_format(k): return kwargs.get(k, "{" + k + "}")
    return text.format_map(defaultdict(str, **kwargs))

def make_callback_challenge(text: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback ID –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    clean_text = re.sub(r'[^\x00-\x7F]+', '', text)[:40]
    hash_suffix = hashlib.md5(text.encode("utf-8")).hexdigest()[:6]
    callback = f"{clean_text}_{hash_suffix}"
    return callback[:60] if len(callback.encode("utf-8")) > 64 else callback

# –ë–ª–æ–∫: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    users_data = load_users()
    application.bot_data["users"] = users_data
    logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-—Ñ–∞–π–ª–æ–≤
    for key, file in [
        ("challenges", CHALLENGES_FILE),
        ("rules", RULES_FILE),
        ("motivations", MOTIVATIONS_FILE),
        ("rhythm", RITM_FILE),
        ("morning_phrases", MORNING_FILE),
        ("goals", GOALS_FILE),
        ("day_phrases", DAY_FILE),
        ("evening_phrases", EVENING_FILE)
    ]:
        application.bot_data[key] = load_json(file)
    logger.info("üìö –ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã: "
                f"challenges={len(application.bot_data['challenges'])}, "
                f"rules={len(application.bot_data['rules'])}, "
                f"motivations={len(application.bot_data['motivations'])}, "
                f"rhythm={len(application.bot_data['rhythm'])}, "
                f"morning_phrases={len(application.bot_data['morning_phrases'])}, "
                f"goals={len(application.bot_data['goals'])}, "
                f"day_phrases={len(application.bot_data['day_phrases'])}, "
                f"evening_phrases={len(application.bot_data['evening_phrases'])}")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
    for job in application.job_queue.jobs():
        job.schedule_removal()
    logger.info("üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫
    schedules = [
        {"hour": 8, "minute": 0, "file": MORNING_FILE, "log": "üåÖ –£—Ç—Ä–æ", "key": "morning_phrases"},
        {"hour": 12, "minute": 0, "file": GOALS_FILE, "log": "üé≤ –°–ª—É—á–∞–π–Ω–∞—è", "key": "goals"},
        {"hour": 15, "minute": 0, "file": DAY_FILE, "log": "‚òÄÔ∏è –î–µ–Ω—å", "key": "day_phrases"},
        {"hour": 18, "minute": 0, "file": EVENING_FILE, "log": "üåô –í–µ—á–µ—Ä", "key": "evening_phrases"},
    ]
    total_jobs = 0
    for chat_id_str, user in users_data.items():
        try:
            tz = pytz.timezone(user.get("timezone", "Europe/Kiev"))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–∞–π–º–∑–æ–Ω—ã –¥–ª—è {chat_id_str}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Kiev")
            tz = pytz.timezone("Europe/Kiev")
        for job in schedules:
            if not job["file"].exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {job['file']} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫")
                continue
            application.job_queue.run_daily(
                send_scheduled_message,
                time=time(hour=job["hour"], minute=job["minute"], tzinfo=tz),
                chat_id=int(chat_id_str),
                data={"cache_key": job["key"], "log": job["log"]},
                name=f"{job['log']}_{chat_id_str}"
            )
            total_jobs += 1
    application.job_queue.run_daily(check_demo_reminders, time=time(hour=10, minute=0, tzinfo=pytz.UTC))
    logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_jobs} —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ 1 –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    if not await safe_send(application, ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"):
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {ADMIN_CHAT_ID}")

async def safe_send(application: Application, chat_id: int, text: str, **kwargs) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await application.bot.send_message(chat_id, text, **kwargs)
        return True
    except Forbidden:
        logger.warning(f"‚õî –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {chat_id}")
        users_data = application.bot_data.get("users", {})
        if str(chat_id) in users_data:
            users_data[str(chat_id)]["active"] = False
            save_users(users_data)
        return False
    except BadRequest as e:
        msg = str(e).lower()
        if "chat not found" in msg or "user not found" in msg:
            logger.warning(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è BadRequest –¥–ª—è {chat_id}: {e}")
        return False
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        return await safe_send(application, chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
        return False

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.effective_chat.id
    name = update.effective_user.first_name or "–¥—Ä—É–≥"
    users_data = context.bot_data.get("users", {})
    user = users_data.get(str(chat_id))

    is_admin = chat_id == ADMIN_CHAT_ID or (user and user.get("is_admin", False))
    is_special = chat_id == SPECIAL_USER_ID
    is_new = not user or is_special
    logger.info(f"üì• /start –æ—Ç {name} ({chat_id}), is_admin: {is_admin}")

    should_welcome = True
    if is_new:
        expiration = None if is_admin else (datetime.now(pytz.UTC) + timedelta(days=3)).isoformat()
        users_data[str(chat_id)] = {
            "name": name, "timezone": "Europe/Kiev", "demo_expiration": expiration,
            "active": True, "is_admin": is_admin, "last_welcome": datetime.now(pytz.UTC).isoformat(),
            "demo_count": 0 if is_admin or is_special else 1, "next_demo_available": None,
            "last_challenge_date": None, "challenge_accepted": None, "last_rhythm_date": None,
            "current_challenge": None
        }
        logger.info(f"‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({chat_id})")
        if not is_admin and not is_special:
            await safe_send(context.application, ADMIN_CHAT_ID, f"üë§ –ù–æ–≤—ã–π: {name} (ID: {chat_id})")
    else:
        users_data[str(chat_id)]["active"] = True
        for key in ["last_challenge_date", "challenge_accepted", "last_rhythm_date", "current_challenge"]:
            if key not in users_data[str(chat_id)]:
                users_data[str(chat_id)][key] = None
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({chat_id}) –≤–µ—Ä–Ω—É–ª—Å—è")
        if user.get("last_welcome"):
            last_welcome = datetime.fromisoformat(user["last_welcome"]).replace(tzinfo=pytz.UTC)
            if datetime.now(pytz.UTC) - last_welcome < timedelta(minutes=10):
                should_welcome = False

    if not is_admin and not is_special and is_demo_expired(users_data, chat_id):
        demo_count = users_data[str(chat_id)].get("demo_count", 1)
        next_demo = users_data[str(chat_id)].get("next_demo_available")
        if demo_count >= 2:
            if not next_demo:
                users_data[str(chat_id)]["next_demo_available"] = (datetime.now(pytz.UTC) + timedelta(days=1)).isoformat()
                await update.message.reply_text(
                    "‚è≥ –í—Ç–æ—Ä–æ–π –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫. –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.", reply_markup=EXPIRED_DEMO_MARKUP
                )
                save_users(users_data)
                return
            next_time = datetime.fromisoformat(next_demo).replace(tzinfo=pytz.UTC)
            if datetime.now(pytz.UTC) < next_time:
                time_left = next_time - datetime.now(pytz.UTC)
                hours, minutes = int(time_left.total_seconds() // 3600), int((time_left.total_seconds() % 3600) // 60)
                await update.message.reply_text(
                    f"‚è≥ –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.", reply_markup=EXPIRED_DEMO_MARKUP
                )
                return
            users_data[str(chat_id)]["active"] = False
            save_users(users_data)
            await update.message.reply_text(
                "‚ùå –î–≤–∞ –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.", reply_markup=EXPIRED_DEMO_MARKUP
            )
            return
        if next_demo:
            next_time = datetime.fromisoformat(next_demo).replace(tzinfo=pytz.UTC)
            if datetime.now(pytz.UTC) < next_time:
                time_left = next_time - datetime.now(pytz.UTC)
                hours, minutes = int(time_left.total_seconds() // 3600), int((time_left.total_seconds() % 3600) // 60)
                await update.message.reply_text(
                    f"‚è≥ –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.", reply_markup=EXPIRED_DEMO_MARKUP
                )
                return
        users_data[str(chat_id)]["demo_expiration"] = (datetime.now(pytz.UTC) + timedelta(days=3)).isoformat()
        users_data[str(chat_id)]["demo_count"] = 2
        users_data[str(chat_id)]["next_demo_available"] = None
        users_data[str(chat_id)]["active"] = True
        logger.info(f"üîÑ –í—Ç–æ—Ä–æ–π –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥ –¥–ª—è {chat_id}")

    if chat_id == ADMIN_CHAT_ID:
        users_data[str(chat_id)]["is_admin"] = True
        users_data[str(chat_id)]["demo_count"] = 0
        users_data[str(chat_id)]["next_demo_available"] = None

    save_users(users_data)
    context.bot_data["users"] = users_data

    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    if should_welcome:
        demo_count = users_data[str(chat_id)].get("demo_count", 1)
        demo_exp = users_data[str(chat_id)].get("demo_expiration")
        user_tz = get_user_timezone(users_data, chat_id)
        exp_date = "–±–µ—Å—Å—Ä–æ—á–Ω–æ" if is_admin else datetime.fromisoformat(demo_exp).astimezone(user_tz).strftime("%d.%m.%Y %H:%M")
        text = (
            f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}! –Ø —Ä–∞–¥–∞ —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫ —Ç–≤–æ–∏–º —Ü–µ–ª—è–º.\n"
            f"–î–µ–º–æ-–ø–µ—Ä–∏–æ–¥ ‚Äî 3 –¥–Ω—è (–¥–æ {exp_date}). –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å )"
        ) if demo_count == 2 and not is_special else (
            f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –§–æ—Ç–∏–Ω–∏—è, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n"
            f"–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {exp_date}.\n\n"
            "–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ç—Ä–æ–º, –¥–Ω—ë–º –∏ –≤–µ—á–µ—Ä–æ–º.\n"
            "–ê —ç—Ç–æ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
        )
        await update.message.reply_text(text, reply_markup=keyboard)
        logger.info(f"üì§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {chat_id}")
        users_data[str(chat_id)]["last_welcome"] = datetime.now(pytz.UTC).isoformat()
        save_users(users_data)
    else:
        await update.message.reply_text("–ú–µ–Ω—é –Ω–∞ –º–µ—Å—Ç–µ üëá", reply_markup=keyboard)

async def handle_pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pay."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• /pay –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    await update.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–æ!", reply_markup=keyboard)

async def handle_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP

    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", reply_markup=keyboard)
        return

    motivations = context.bot_data.get("motivations", [])
    if not motivations:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=keyboard)
        return

    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    phrase = safe_format(random.choice(motivations), name=user_name)
    await update.message.reply_text(f"üí° <b>{phrase}</b>", parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {chat_id}: {phrase}")

async def handle_rhythm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∏—Ç–º–∞ –¥–Ω—è —Å –¥–Ω–µ–≤–Ω—ã–º –ª–∏–º–∏—Ç–æ–º."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å —Ä–∏—Ç–º–∞ –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP

    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", reply_markup=keyboard)
        return

    user = users_data.get(str(chat_id), {})
    user_tz = get_user_timezone(users_data, chat_id)
    current_date = datetime.now(user_tz).date().isoformat()
    if user.get("last_rhythm_date") == current_date:
        await update.message.reply_text("‚è≥ –†–∏—Ç–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è.", reply_markup=keyboard)
        logger.info(f"‚è≥ –†–∏—Ç–º –¥–ª—è {chat_id} —É–∂–µ –≤—ã–¥–∞–Ω")
        return

    rhythms = context.bot_data.get("rhythm", [])
    if not rhythms:
        await update.message.reply_text("‚ö†Ô∏è –†–∏—Ç–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=keyboard)
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–∏—Ç–º–æ–≤ –¥–ª—è {chat_id}")
        return

    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    rhythm = safe_format(random.choice(rhythms), name=user_name)
    await update.message.reply_text(f"üé∂ <b>{rhythm}</b>", parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"üé∂ –†–∏—Ç–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id}: {rhythm}")

    users_data[str(chat_id)]["last_rhythm_date"] = current_date
    save_users(users_data)

async def handle_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ —Å –∏–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç–∞–º–∏."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞ –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP

    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", reply_markup=keyboard)
        return

    user = users_data.get(str(chat_id), {})
    user_tz = get_user_timezone(users_data, chat_id)
    current_date = datetime.now(user_tz).date().isoformat()
    if user.get("last_challenge_date") == current_date:
        if user.get("challenge_accepted") is True:
            await update.message.reply_text("‚è≥ –ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=keyboard)
            logger.info(f"‚è≥ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è {chat_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return
        if user.get("challenge_accepted") is False:
            await update.message.reply_text("üî• –ü—Ä–∏–º–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂!", reply_markup=keyboard)
            logger.info(f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è {chat_id} –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è")
            return

    challenges = context.bot_data.get("challenges", [])
    if not challenges:
        await update.message.reply_text("‚ö†Ô∏è –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=keyboard)
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –¥–ª—è {chat_id}")
        return

    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    challenge = safe_format(random.choice(challenges), name=user_name)
    logger.info(f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è {chat_id}: {challenge}")

    callback_id = make_callback_challenge(challenge)
    users_data[str(chat_id)]["current_challenge"] = challenge
    save_users(users_data)

    inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{callback_id}"),
                                           InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π", callback_data="new")]])

    try:
        await update.message.reply_text(f"üî• <b>{challenge}</b>", parse_mode="HTML", reply_markup=inline_keyboard)
        await update.message.reply_text("üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ üëá", reply_markup=keyboard)
        logger.info(f"üì§ –ß–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id}")
    except BadRequest as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–ª—è {chat_id}: {e}")
        await safe_send(context.application, ADMIN_CHAT_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e} –¥–ª—è {chat_id}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard)

    users_data[str(chat_id)]["last_challenge_date"] = current_date
    users_data[str(chat_id)]["challenge_accepted"] = False
    save_users(users_data)

async def handle_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP

    if not users_data.get(str(chat_id), {}).get("active", True) or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", reply_markup=keyboard)
        return

    rules = context.bot_data.get("rules", [])
    if not rules:
        rules = load_json(RULES_FILE)
        context.bot_data["rules"] = rules
        logger.info(f"üîÑ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(rules)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    if not rules:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=keyboard)
        return

    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    rule = safe_format(random.choice(rules), name=user_name)
    await update.message.reply_text(f"üìú <b>{rule}</b>", parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"üìú –ü—Ä–∞–≤–∏–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {chat_id}: {rule}")

async def handle_extend_demo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø–∞."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–µ–º–æ –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else EXPIRED_DEMO_MARKUP
    await update.message.reply_text("üí≥ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", reply_markup=keyboard)

async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=keyboard)

async def show_users_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Ñ–∞–π–ª–∞ users.json (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å users.json –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    if not is_admin:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.", reply_markup=keyboard)
        return
    try:
        if not USERS_FILE.exists():
            await update.message.reply_text("üìÇ –§–∞–π–ª users.json –Ω–µ —Å–æ–∑–¥–∞–Ω.", reply_markup=keyboard)
            return
        await update.message.reply_document(document=open(USERS_FILE, "rb"))
        await update.message.reply_text("üìÇ –§–∞–π–ª users.json –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=keyboard)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", reply_markup=keyboard)

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    chat_id = update.effective_chat.id
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç {chat_id}")
    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    if not is_admin:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.", reply_markup=keyboard)
        return
    users = {k: v for k, v in load_users().items() if int(k) != SPECIAL_USER_ID}
    total = len(users)
    active = sum(1 for u in users.values() if u.get("active", False))
    active_first = sum(1 for u in users.values() if u.get("active", False) and u.get("demo_count", 1) == 1)
    active_repeat = sum(1 for u in users.values() if u.get("active", False) and u.get("demo_count", 1) == 2)
    inactive = total - active
    inactive_expired = sum(1 for k, u in users.items() if not u.get("active", False) and is_demo_expired(users, int(k)))
    inactive_blocked = inactive - inactive_expired
    await update.message.reply_text(
        f"üë• –í—Å–µ–≥–æ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"   –ò–∑ –Ω–∏—Ö:\n"
        f"   - –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {active_first}\n"
        f"   - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥: {active_repeat}\n"
        f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive}\n"
        f"   –ò–∑ –Ω–∏—Ö:\n"
        f"   - –ó–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥: {inactive_expired}\n"
        f"   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∏ –≤—ã—à–ª–∏: {inactive_blocked}",
        reply_markup=keyboard
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    logger.info(f"üì• Callback –æ—Ç {chat_id}: {query.data}")

    users_data = context.bot_data.get("users", {})
    is_admin = chat_id == ADMIN_CHAT_ID or users_data.get(str(chat_id), {}).get("is_admin", False)
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP

    if query.data.startswith("accept:"):
        callback_id = query.data.split(":", 1)[1]
        current = users_data.get(str(chat_id), {}).get("current_challenge", "–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        users_data[str(chat_id)]["challenge_accepted"] = True
        save_users(users_data)
        try:
            await query.edit_message_text(f"üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–∏–Ω—è—Ç:\nüî• <b>{current}</b>", parse_mode="HTML")
            await query.message.reply_text("üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ üëá", reply_markup=keyboard)
        except BadRequest as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–ª—è {chat_id}: {e}")
            await safe_send(context.application, ADMIN_CHAT_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e} –¥–ª—è {chat_id}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è.", reply_markup=keyboard)
        return

    elif query.data == "new":
        user = users_data.get(str(chat_id), {})
        if user.get("challenge_accepted") is True:
            await query.edit_message_text("‚è≥ –ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            await query.message.reply_text("üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ üëá", reply_markup=keyboard)
            return
        challenges = context.bot_data.get("challenges", [])
        if not challenges:
            await query.edit_message_text("‚ö†Ô∏è –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await query.message.reply_text("üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ üëá", reply_markup=keyboard)
            return
        user_name = query.from_user.first_name or "–¥—Ä—É–≥"
        new_challenge = safe_format(random.choice(challenges), name=user_name)
        callback_id = make_callback_challenge(new_challenge)
        users_data[str(chat_id)]["current_challenge"] = new_challenge
        save_users(users_data)

        inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{callback_id}"),
                                               InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π", callback_data="new")]])
        try:
            await query.edit_message_text(f"üî• <b>{new_challenge}</b>", parse_mode="HTML", reply_markup=inline_keyboard)
            await query.message.reply_text("üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ üëá", reply_markup=keyboard)
        except BadRequest as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–ª—è {chat_id}: {e}")
            await safe_send(context.application, ADMIN_CHAT_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e} –¥–ª—è {chat_id}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.", reply_markup=keyboard)
        users_data[str(chat_id)]["last_challenge_date"] = datetime.now(get_user_timezone(users_data, chat_id)).date().isoformat()
        users_data[str(chat_id)]["challenge_accepted"] = False
        save_users(users_data)

async def send_scheduled_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    job = context.job
    chat_id = job.chat_id
    cache_key = job.data["cache_key"]
    log = job.data["log"]
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_demo_expired(users_data, chat_id) or is_grace_period_expired(users_data, chat_id):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫ {log} –¥–ª—è {chat_id}")
        return
    phrases = context.bot_data.get(cache_key, [])
    if not phrases:
        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ {cache_key} –¥–ª—è {chat_id}")
        return
    name = users_data.get(str(chat_id), {}).get("name", "–¥—Ä—É–≥")
    if await safe_send(context.application, chat_id, safe_format(random.choice(phrases), name=name)):
        logger.info(f"‚úÖ {log} –¥–ª—è {chat_id}")
    else:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {log} –¥–ª—è {chat_id}")

async def check_demo_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥–µ."""
    users_data = context.bot_data.get("users", {})
    now = datetime.now(pytz.UTC)
    for chat_id_str, user in users_data.items():
        if int(chat_id_str) == SPECIAL_USER_ID:
            continue
        if user.get("demo_expiration"):
            try:
                chat_id = int(chat_id_str)
                demo_end = datetime.fromisoformat(user["demo_expiration"]).replace(tzinfo=pytz.UTC)
                if timedelta(days=0) < demo_end - now <= timedelta(days=1):
                    await safe_send(context.application, chat_id, "‚è∞ –î–µ–º–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            except (ValueError, TypeError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {chat_id_str}: {e}")

async def reload_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤."""
    context.bot_data["users"] = load_users()
    for key, file in [
        ("challenges", CHALLENGES_FILE),
        ("rules", RULES_FILE),
        ("motivations", MOTIVATIONS_FILE),
        ("rhythm", RITM_FILE),
        ("morning_phrases", MORNING_FILE),
        ("goals", GOALS_FILE),
        ("day_phrases", DAY_FILE),
        ("evening_phrases", EVENING_FILE)
    ]:
        context.bot_data[key] = load_json(file)
    await update.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# –ë–ª–æ–∫: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –∏ –±–æ—Ç–∞
from fastapi import FastAPI
from contextlib import asynccontextmanager

async def setup_bot() -> Application:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞."""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞...")
    application = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", handle_start))
    application.add_handler(CommandHandler("pay", handle_pay))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_MOTIVATE}$"), handle_motivation))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_RHYTHM}$"), handle_rhythm))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_CHALLENGE}$"), handle_challenge))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_RULES}$"), handle_rules))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_EXTEND_DEMO}$"), handle_extend_demo))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_SHOW_USERS}$"), show_users_file))
    application.add_handler(MessageHandler(filters.Regex(f"^{BTN_STATS}$"), user_stats))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_text))

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    return application

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    app.state.ptb_app = await setup_bot()
    logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤")
    yield
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    await app.state.ptb_app.shutdown()
    await app.state.ptb_app.stop()

app = FastAPI(lifespan=lifespan)

@app.post("/webhook/{token}")
async def process_update(request: Request, token: str) -> Dict[str, bool]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞."""
    if token != BOT_TOKEN.split(':')[0]:
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        return {"ok": False}
    app = request.app.state.ptb_app
    update_data = await request.json()
    update = Update.de_json(update_data, app.bot)
    await app.process_update(update)
    return {"ok": True}

@app.get("/health")
async def health_check() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    return {"status": "ok"}

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)

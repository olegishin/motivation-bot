import os
import json
import random
import logging
import asyncio
import tempfile
import shutil
import re
from pathlib import Path
from datetime import datetime, timedelta, time
from zoneinfo import ZoneInfo

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.error import Forbidden, BadRequest, RetryAfter
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ---------------- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ----------------
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –Ω–µ—Ç

USERS_FILE = DATA_DIR / "users.json"
GOALS_FILE = DATA_DIR / "fotinia_goals.json"
MORNING_FILE = DATA_DIR / "fotinia_morning_phrases.json"
EVENING_FILE = DATA_DIR / "fotinia_evening_phrases.json"
DAY_FILE = DATA_DIR / "fotinia_day_phrases.json"
PHRASES_FILE = DATA_DIR / "fotinia_phrases.json"
CHALLENGES_FILE = DATA_DIR / "challenges.json"
RULES_FILE = DATA_DIR / "universe_laws.json"

# ---------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------------
if "BOT_TOKEN" not in os.environ or "ADMIN_CHAT_ID" not in os.environ:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
BOT_TOKEN = os.environ["BOT_TOKEN"]
OWNER_CHAT_ID = int(os.environ["ADMIN_CHAT_ID"])  # <- —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–æ–π Telegram ID

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
BTN_MOTIVATE    = "üí™ –ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è"
BTN_RANDOM_GOAL = "üéØ –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å"
BTN_CHALLENGE   = "‚öîÔ∏è –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è"
BTN_RULES       = "üìú –ü—Ä–∞–≤–∏–ª–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"

BTN_SHOW_USERS  = "üìÇ –°–º–æ—Ç—Ä–µ—Ç—å users.json"
BTN_STATS       = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

MAIN_KEYBOARD = [
    [BTN_MOTIVATE, BTN_RANDOM_GOAL],
    [BTN_CHALLENGE, BTN_RULES]
]

ADMIN_BUTTONS = [
    [BTN_SHOW_USERS, BTN_STATS]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
OWNER_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD + ADMIN_BUTTONS, resize_keyboard=True)

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def load_json(filepath: Path) -> list | dict:
    if not filepath.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return [] if filepath in [PHRASES_FILE, MORNING_FILE, EVENING_FILE, DAY_FILE, GOALS_FILE, CHALLENGES_FILE, RULES_FILE] else {}
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
            if filepath in [PHRASES_FILE, MORNING_FILE, EVENING_FILE, DAY_FILE, GOALS_FILE, CHALLENGES_FILE, RULES_FILE]:
                if isinstance(data, dict):
                    return list(data.values())
                return data if isinstance(data, list) else []
            return data if isinstance(data, dict) else {}
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {filepath}: {e}")
        return []
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filepath}: {e}")
        return []

def load_users() -> dict:
    return load_json(USERS_FILE) or {}

def save_users(users_data: dict) -> None:
    try:
        with tempfile.NamedTemporaryFile("w", delete=False, encoding="utf-8") as tmp:
            json.dump(users_data, tmp, ensure_ascii=False, indent=2)
            tmp_path = tmp.name
        shutil.move(tmp_path, USERS_FILE)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {USERS_FILE}: {e}")

def get_user_timezone(users_data: dict, chat_id: int) -> ZoneInfo:
    tz_name = users_data.get(str(chat_id), {}).get("timezone", "Europe/Kyiv")
    try:
        return ZoneInfo(tz_name)
    except Exception:
        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∑–æ–Ω–∞ '{tz_name}' –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Kyiv")
        return ZoneInfo("Europe/Kyiv")

def get_user_name(users_data: dict, chat_id: int, default="–¥—Ä—É–≥") -> str:
    return users_data.get(str(chat_id), {}).get("name", default)

def is_demo_expired(users_data: dict, chat_id: int) -> bool:
    user = users_data.get(str(chat_id))
    if not user:
        return True
    demo_exp = user.get("demo_expiration")
    if demo_exp is None:  # –í–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –Ω–µ expired
        return False
    try:
        expiration = datetime.fromisoformat(demo_exp)
        user_tz = get_user_timezone(users_data, chat_id)
        if expiration.tzinfo is None:
            expiration = expiration.replace(tzinfo=user_tz)
        return datetime.now(user_tz) > expiration
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ demo_expiration –¥–ª—è {chat_id}: {e}")
        return True

def is_grace_period_expired(users_data: dict, chat_id: int) -> bool:
    user = users_data.get(str(chat_id))
    if not user or "grace_period_end" not in user:
        return False
    try:
        grace_end = datetime.fromisoformat(user["grace_period_end"])
        user_tz = get_user_timezone(users_data, chat_id)
        if grace_end.tzinfo is None:
            grace_end = grace_end.replace(tzinfo=user_tz)
        return datetime.now(user_tz) > grace_end
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ grace_period_end –¥–ª—è {chat_id}: {e}")
        return True

# ---------------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ----------------
async def safe_send(app, chat_id: int, text: str, **kwargs) -> bool:
    try:
        await app.bot.send_message(int(chat_id), text, **kwargs)
        return True
    except Forbidden:
        logger.warning(f"‚õî –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
        return False
    except BadRequest as e:
        msg = str(e).lower()
        if "chat not found" in msg or "chat_not_found" in msg:
            logger.warning(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è BadRequest –¥–ª—è {chat_id}: {e}")
        return False
    except RetryAfter as e:
        delay = getattr(e, "retry_after", 5)
        logger.warning(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram, –∂–¥—ë–º {delay} —Å–µ–∫...")
        await asyncio.sleep(delay)
        try:
            await app.bot.send_message(int(chat_id), text, **kwargs)
            return True
        except RetryAfter:
            logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat_id} –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞")
            return False
        except Exception as e2:
            logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat_id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
            return False
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")
        return False

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------
async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_int = update.effective_chat.id
    chat_id_str = str(chat_id_int)
    name = update.effective_user.first_name or "–¥—Ä—É–≥"

    users_data = context.bot_data.get("users", {})
    user_record = users_data.get(chat_id_str)

    logger.info(f"DEBUG start: chat_id={chat_id_int}, owner={OWNER_CHAT_ID}, user_record={user_record is not None}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω—Å—Ç–≤–æ
    is_admin = False
    if chat_id_int == OWNER_CHAT_ID:
        is_admin = True
        logger.info(f"DEBUG: OWNER detected, is_admin=True")
    elif user_record:
        is_admin = user_record.get("is_admin", False)
        logger.info(f"DEBUG: from record, is_admin={is_admin}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    is_new_user = False
    if not user_record:
        tz = ZoneInfo("Europe/Kyiv")
        expiration = (datetime.now(tz) + timedelta(days=3)).isoformat() if chat_id_int != OWNER_CHAT_ID else None
        users_data[chat_id_str] = {
            "name": name,
            "timezone": str(tz),
            "demo_expiration": expiration,
            "active": True,
            "is_admin": is_admin  # OWNER –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ admin
        }
        is_new_user = True
        logger.info(f"DEBUG: New user created, is_new={is_new_user}, is_admin={is_admin}")
    else:
        users_data[chat_id_str]["active"] = True
        logger.info(f"DEBUG: Existing user, active=True")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ –∏ –≥—Ä–∞–π—Å-–ø–µ—Ä–∏–æ–¥–∞
    if chat_id_int != OWNER_CHAT_ID:
        if is_demo_expired(users_data, chat_id_int):
            if not user_record.get("grace_period_end"):
                users_data[chat_id_str]["active"] = False
                users_data[chat_id_str]["grace_period_end"] = (datetime.now(tz) + timedelta(days=4)).isoformat()
                logger.info(f"‚è≥ –î–µ–º–æ –¥–ª—è {chat_id_int} –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–∞—Ç –≥—Ä–∞–π—Å-–ø–µ—Ä–∏–æ–¥ –¥–æ {users_data[chat_id_str]['grace_period_end']}")
                save_users(users_data)
                context.bot_data["users"] = users_data
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞", callback_data="extend_demo"),
                                                 InlineKeyboardButton("–ù–µ—Ç", callback_data="no_extend")]])
                await update.message.reply_text("‚ùå –î–µ–º–æ-–ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)
                return
            elif is_grace_period_expired(users_data, chat_id_int):
                users_data[chat_id_str]["active"] = False
                logger.info(f"‚è≥ –ì—Ä–∞–π—Å-–ø–µ—Ä–∏–æ–¥ –¥–ª—è {chat_id_int} –∏—Å—Ç–µ–∫, –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ")
                save_users(users_data)
                context.bot_data["users"] = users_data
                await update.message.reply_text("‚ùå –ì—Ä–∞–π—Å-–ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                return

    save_users(users_data)
    context.bot_data["users"] = users_data
    logger.info(f"DEBUG: Saved users, len={len(users_data)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if is_new_user and chat_id_int != OWNER_CHAT_ID:
        tz = users_data[chat_id_str]["timezone"]
        expiration = users_data[chat_id_str]["demo_expiration"]
        await safe_send(context.application, OWNER_CHAT_ID, f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {chat_id_int}), –¢–∞–π–º-–∑–æ–Ω–∞: {tz}, –°—Ä–æ–∫: {expiration}")
        logger.info(f"DEBUG: Notification sent to owner")

    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = OWNER_MARKUP if is_admin else MAIN_MARKUP
    logger.info(f"DEBUG: Keyboard={ 'OWNER' if is_admin else 'MAIN' }")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expiration_date = datetime.fromisoformat(users_data[chat_id_str]["demo_expiration"]).strftime("%d.%m.%Y %H:%M") if users_data[chat_id_str]["demo_expiration"] else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –§–æ—Ç–∏–Ω–∏—è, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n"
        f"–¢–≤–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è –¥–æ {expiration_date}.\n"
        "–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ç—Ä–æ–º, –¥–Ω—ë–º –∏ –≤–µ—á–µ—Ä–æ–º.\n"
        "–ê —ç—Ç–æ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id_int} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª. Admin={is_admin}, –ù–æ–≤—ã–π={is_new_user}")
    await update.message.reply_text(text, reply_markup=keyboard)

async def handle_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pay"""
    await update.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–æ!")

async def handle_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    try:
        phrases = load_json(PHRASES_FILE)
        if not phrases:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–π –ø—É—Å—Ç.")
            return
        phrase = random.choice(phrases)
        await update.message.reply_text(f"üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è:\n<b>{phrase}</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é.")

async def handle_random_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    try:
        goals = load_json(GOALS_FILE)
        if not goals:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        goal = random.choice(goals)
        await update.message.reply_text(f"üéØ –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å:\n<b>{goal}</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å.")

async def handle_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    try:
        challenges = load_json(CHALLENGES_FILE)
        if not challenges:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—É—Å—Ç.")
            return
        challenge = random.choice(challenges)
        await update.message.reply_text(f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂:\n<b>{challenge}</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂.")

async def handle_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    try:
        rules = load_json(RULES_FILE)
        if not rules:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç.")
            return
        rule = random.choice(rules)
        await update.message.reply_text(f"üìú –ó–∞–∫–æ–Ω –í—Å–µ–ª–µ–Ω–Ω–æ–π:\n<b>{rule}</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞.")

async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    query = update.callback_query
    chat_id = query.from_user.id
    chat_id_str = str(chat_id)
    users_data = context.bot_data.get("users", {})
    user = users_data.get(chat_id_str)

    if query.data == "extend_demo":
        await query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 500 —Ä—É–±", callback_data="pay_1m"),
             InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ ‚Äî 1200 —Ä—É–±", callback_data="pay_3m")]
        ]))
    elif query.data == "no_extend":
        user["active"] = False
        user["grace_period_end"] = (datetime.now(ZoneInfo("UTC")) + timedelta(days=4)).isoformat()
        await query.message.edit_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–∞–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ 4 –¥–Ω—è. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        save_users(users_data)
        context.bot_data["users"] = users_data
    elif query.data in ["pay_1m", "pay_3m"]:
        months = 1 if query.data == "pay_1m" else 3
        user["demo_expiration"] = None
        user["subscription_end"] = (datetime.now(ZoneInfo("UTC")) + timedelta(days=30 * months)).isoformat()
        user["active"] = True
        await query.message.edit_text(f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å. –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! (–ó–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Payments)")
        save_users(users_data)
        context.bot_data["users"] = users_data

async def show_users_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_data = context.bot_data.get("users", {})
    chat_id_str = str(update.effective_user.id)
    is_admin = users_data.get(chat_id_str, {}).get("is_admin", False)

    if update.effective_user.id != OWNER_CHAT_ID and not is_admin:
        return

    try:
        size = USERS_FILE.stat().st_size if USERS_FILE.exists() else 0
        if size > 4000:
            with open(USERS_FILE, "rb") as f:
                await update.message.reply_document(document=f)
            return
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = f.read()
        await update.message.reply_text(f"<code>{data}</code>", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users_data = context.bot_data.get("users", {})
    chat_id_str = str(update.effective_user.id)
    is_admin = users_data.get(chat_id_str, {}).get("is_admin", False)

    if update.effective_user.id != OWNER_CHAT_ID and not is_admin:
        return

    try:
        users = load_users()
        total = len(users)
        active = sum(1 for u in users.values() if u.get("active"))
        inactive = total - active
        await update.message.reply_text(
            f"üë• –í—Å–µ–≥–æ: {total}\nüë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\nüò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ: {e}")

async def handle_demo_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_users()
    chat_id_str = str(update.effective_chat.id)
    user = users.get(chat_id_str)
    if not user:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    await update.message.reply_text(f"–î–µ–º–æ –∏—Å—Ç–µ–∫–∞–µ—Ç: {user.get('demo_expiration', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

async def handle_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõ† Debug-–∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# ---------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------
async def send_scheduled_message(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.kwargs.get("chat_id") or (job.args[0] if job.args else None)
    data = job.kwargs.get("data", {})
    filename = data.get("filename")
    log_message = data.get("log_message", "–†–∞—Å—Å—ã–ª–∫–∞")

    if chat_id is None:
        logger.warning("–ù–µ—Ç chat_id –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        return

    if not filename:
        logger.warning(f"‚ùå –ù–µ—Ç filename –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–¥–∞—á–µ {job}")
        return

    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        logger.info(f"‚è≥ –î–æ—Å—Ç—É–ø –¥–ª—è {chat_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ '{log_message}' –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    if is_demo_expired(users_data, chat_id):
        logger.info(f"‚è≥ –î–µ–º–æ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è {chat_id}, —Ä–∞—Å—Å—ã–ª–∫–∞ '{log_message}' –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    file_path = BASE_DIR / filename
    if not file_path.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    phrases = load_json(file_path)
    if not phrases:
        logger.warning(f"‚ö†Ô∏è –§—Ä–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename} –¥–ª—è {chat_id}")
        return

    name = get_user_name(users_data, chat_id)
    phrase = random.choice(phrases)
    try:
        phrase = phrase.format(name=name)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã –¥–ª—è {chat_id}: {e}")
    success = await safe_send(context.application, chat_id, phrase)
    if success:
        logger.info(f"‚úÖ {log_message} –¥–ª—è {chat_id}")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {log_message} –¥–ª—è {chat_id}")

async def check_demo_reminder(context: ContextTypes.DEFAULT_TYPE):
    users_data = context.bot_data.get("users", {})
    current_time = datetime.now(ZoneInfo("UTC"))
    for chat_id_str, user in users_data.items():
        chat_id = int(chat_id_str)
        if user.get("demo_expiration") and not is_demo_expired(users_data, chat_id):
            demo_end = datetime.fromisoformat(user["demo_expiration"])
            if (demo_end - current_time).days == 1:
                await safe_send(context.application, chat_id, "‚è∞ –ó–∞–≤—Ç—Ä–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!")
            elif (demo_end - current_time).days == 2:
                await safe_send(context.application, chat_id, "‚è∞ –ß–µ—Ä–µ–∑ 2 –¥–Ω—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –ü–æ–¥—É–º–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ?")
    save_users(users_data)
    context.bot_data["users"] = users_data

# ---------------- Broadcast –¥–ª—è –≤—Å–µ—Ö ----------------
async def send_broadcast(context: ContextTypes.DEFAULT_TYPE):
    users_data = context.bot_data.get("users", {})
    sent_count = 0
    for chat_id_str, user in users_data.items():
        chat_id = int(chat_id_str)
        if not user.get("active") or is_grace_period_expired(users_data, chat_id):
            continue
        logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        if await safe_send(
            context.application,
            chat_id,
            "üì¢ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ):
            sent_count += 1
        await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate-limit
    logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")

# ---------------- –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------------
async def handle_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (/test)"""
    chat_id = update.effective_chat.id
    users_data = context.bot_data.get("users", {})
    if not users_data.get(str(chat_id), {}).get("active") or is_grace_period_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    if is_demo_expired(users_data, chat_id):
        await update.message.reply_text("‚ùå –î–µ–º–æ –∏—Å—Ç–µ–∫–ª–æ, —Ç–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
        return
    
    filename = "fotinia_phrases.json"
    file_path = BASE_DIR / filename
    if not file_path.exists():
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª —Ñ—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    phrases = load_json(file_path)
    if not phrases:
        await update.message.reply_text("‚ö†Ô∏è –§—Ä–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    
    name = get_user_name(users_data, chat_id)
    phrase = random.choice(phrases)
    try:
        phrase = phrase.format(name=name)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã –¥–ª—è {chat_id}: {e}")
    
    success = await safe_send(context.application, chat_id, phrase)
    if success:
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Ä—É—á–Ω—É—é –¥–ª—è {chat_id}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞.")

async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º (/broadcast) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è OWNER"""
    if update.effective_chat.id != OWNER_CHAT_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –≤—Å–µ–º.")
        return
    
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º...")
    await send_broadcast(context)
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# ---------------- Main / –∑–∞–ø—É—Å–∫ ----------------
async def post_init(app: Application):
    logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è post_init...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
    if not app.bot_data.get("post_init_done"):
        logger.info("üì§ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        try:
            await app.bot.send_message(chat_id=OWNER_CHAT_ID, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            app.bot_data["post_init_done"] = True
            logger.info("üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users()
    app.bot_data["users"] = users_data
    logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    total_jobs = 0
    for chat_id_str, user in users_data.items():
        chat_id = int(chat_id_str)
        tz = ZoneInfo(user.get("timezone", "Europe/Kyiv"))
        schedules = [
            {"hour": 7, "minute": 30, "filename": "fotinia_morning_phrases.json", "log": "üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"},
            {"hour": 11, "minute": 0, "filename": "fotinia_phrases.json", "log": "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"},
            {"hour": 14, "minute": 0, "filename": "fotinia_day_phrases.json", "log": "‚òÄÔ∏è –î–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"},
            {"hour": 18, "minute": 0, "filename": "fotinia_evening_phrases.json", "log": "üåô –í–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"},
        ]

        for job_info in schedules:
            file_path = BASE_DIR / job_info["filename"]
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                continue

            app.job_queue.run_daily(
                send_scheduled_message,
                time=time(hour=job_info["hour"], minute=job_info["minute"], tzinfo=tz),
                kwargs={"chat_id": chat_id, "data": {
                    "filename": job_info["filename"],
                    "log_message": job_info["log"]
                }}
            )
            total_jobs += 1

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    app.job_queue.run_daily(
        check_demo_reminder,
        time=time(hour=0, minute=0, tzinfo=ZoneInfo("UTC")),  # –ü–æ–ª–Ω–æ—á—å UTC
        data={}
    )

    logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_jobs} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ 1 –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ")

if __name__ == "__main__":
    import os
    import asyncio

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    APP_NAME = os.getenv("FLY_APP_NAME")
    PORT = int(os.getenv("PORT", 8443))

    async def main():
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook...")

        app = (
            ApplicationBuilder()
            .token(BOT_TOKEN)
            .post_init(post_init)
            .build()
        )

        # ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----------------
        app.add_handler(CommandHandler("start", handle_start))
        app.add_handler(CommandHandler("pay", handle_pay))
        app.add_handler(CommandHandler("debug", handle_debug))
        app.add_handler(CommandHandler("demo_status", handle_demo_status))
        app.add_handler(CommandHandler("test", handle_test))
        app.add_handler(CommandHandler("broadcast", handle_broadcast))
        app.add_handler(CallbackQueryHandler(handle_callback))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_MOTIVATE)}$"), handle_motivation))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_RANDOM_GOAL)}$"), handle_random_goal))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_CHALLENGE)}$"), handle_challenge))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_RULES)}$"), handle_rules))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape('üìÇ –°–º–æ—Ç—Ä–µ—Ç—å users.json')}$"), show_users_file))
        app.add_handler(MessageHandler(filters.Regex(f"^{re.escape('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}$"), user_stats))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_text))

        # ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook ----------------
        logger.info("üåê –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º pending updates...")
        await app.bot.delete_webhook(drop_pending_updates=True)

        webhook_url = f"https://{APP_NAME}.fly.dev/{BOT_TOKEN}"
        logger.info(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook: {webhook_url}")
        await app.bot.set_webhook(url=webhook_url)

        # ---------------- –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ ----------------
        logger.info(f"üü¢ Webhook-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url
        )

    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ event loop
    asyncio.run(main())